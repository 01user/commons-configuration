<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document>
  <properties>
    <title>Properties files</title>
    <author email="smanux@lfjr.net">Emmanuel Bourg</author>
    <author email="oheger@apache.org">Oliver Heger</author>
  </properties>

  <body>

    <section name="Properties files">
      <p>
        Properties files are a popular mean of configuring applications. Of course Commons Configuration
        supports this format and enhances significantly the basic <code>java.util.Properties</code> class.
        This section introduces the features of the 
        <code><a href="../apidocs/org/apache/commons/configuration/PropertiesConfiguration.html">PropertiesConfiguration</a></code> class.
        Note that <code>PropertiesConfiguration</code> is a very typical example
        for an implementation of the <code>Configuration</code> interface and
        many of the features described in this section (e.g. list handling or
        interpolation) are supported by other configuration classes as well.
        This is because most configuration implementations that ship with
        Commons Configuration are derived from the common base class
        <code><a href="../apidocs/org/apache/commons/configuration/AbstractConfiguration.html">AbstractConfiguration</a></code>,
        which implementes this features.
      </p>

      <subsection name="Using PropertiesConfiguration">
        <p>
          Let's start with a simple properties file named
          <code>usergui.properties</code> with the following content:
        </p>
        <source><![CDATA[
# Properties definining the GUI
colors.background = #FFFFFF
colors.foreground = #000080

window.width = 500
window.height = 300
]]></source>

        <p>
          To load this file, you'll write:
        </p>
<source>
Configuration config = new PropertiesConfiguration("usergui.properties");
</source>
        <p>
          If you do not specify an absolute path, the file will be searched automatically
          in the following locations:
          <ul>
            <li>in the current directory</li>
            <li>in the user home directory</li>
            <li>in the classpath</li>
          </ul>
        </p>
        <p>
          Instead of using a constructor that takes a file name you can also
          invoke one of the <code>load()</code> methods. There are several
          overloaded variants that allow you to load properties from various
          sources. More information about loading properties files (and file-based
          configurations in general) can be found in the section about
          <a href="howto_filebased.html">File-based Configurations</a>.
        </p>
        <p>
          After the properties file was loaded you can access its content through
          the methods of the <code>Configuration</code> interface, e.g.
        </p>
<source>
String backColor = config.getString("colors.background");
Dimension size = new Dimension(config.getInt("window.width"),
  config.getInt("window.height"));
</source>
      </subsection>

      <subsection name="Includes">
        <p>
          If a property is named "<code>include</code>" and the value of that property is the
          name of a file on the disk, that file will be included into the configuration. Here is
          an example:
        </p>
<source>
# usergui.properties

include = colors.properties
include = sizes.properties
</source>

<source>
# colors.properties

colors.background = #FFFFFF
</source>

      </subsection>

      <subsection name="Lists and arrays">
        <p>
          As was already pointed out in the section
          <a href="howto_basicfeatures.html#List_handling">List handling</a>
          of <em>Basic features</em>, Commons Configuration has the ability to
          return easily a list of values. For example a properties file can
          contain a list of comma separated values:
        </p>
<source>
# chart colors
colors.pie = #FF0000, #00FF00, #0000FF
</source>
        <p>
          You don't have to split the value manually, you can retrieve an array
          or a <code>java.util.List</code> directly with:
        </p>
<source>
String[] colors = config.getStringArray("colors.pie");
List colorList = config.getList("colors.pie");
</source>
        <p>
          Alternatively, you can specify a list of values in your properties file by using
          the same key on several lines:
        </p>
<source>
# chart colors
colors.pie = #FF0000;
colors.pie = #00FF00;
colors.pie = #0000FF;
</source>
        <p>
          All of the features related to list handling described for
          <code>AbstractConfiguration</code> also apply to properties files,
          including changing the list delimiter or disabling list handling at
          all.
        </p>
      </subsection>

      <subsection name="Saving">
        <p>
          To save your configuration, just call the <code>save()</code> method:
        </p>
<source>
PropertiesConfiguration config = new PropertiesConfiguration("usergui.properties");
config.setProperty("colors.background", "#000000);
config.save();
</source>
        <p>
          You can also save a copy of the configuration to another file:
        </p>
<source>
PropertiesConfiguration config = new PropertiesConfiguration("usergui.properties");
config.setProperty("colors.background", "#000000);
config.save("usergui.backup.properties);
</source>
        <p>
          More information about saving properties files (and file-based
          configurations in general) can be found in the section about
          <a href="howto_filebased.html">File-based Configurations</a>.
        </p>
      </subsection>

      <subsection name="Special Characters">
        <p>
          If you need a special character in a property like a line feed, a tabulation or
          an unicode character, you can specify it with the same escaped notation used for
          Java Strings. The list separator ("," by default), can also be escaped:
        </p>
        <source><![CDATA[
key = This \n string \t contains \, escaped \\ characters \u0020
]]></source>
      </subsection>

      <subsection name="Layout Objects">
      <p>
        Each <code>PropertiesConfiguration</code> object is associated with a
        <em>Layout object</em>, an instance of the class
        <code><a href="../apidocs/org/apache/commons/configuration/PropertiesConfigurationLayout.html">
        PropertiesConfigurationLayout</a></code>. This layout object is
        responsible for preserving most of the structure of loaded configuration
        files. This means that things like comments or blanc lines in a saved
        properties file will closely resemble the original properties file
        (the algorithm is not 100 percent perfect, but for most use cases it
        should be sufficient).
      </p>
      <p>
        Normally a developer does not have to deal with these layout objects.
        However there are some methods that might be of interest in certain use
        cases. For instance <code>PropertiesConfigurationLayout</code> defines
        methods for obtaining and setting the comment for a property key. A
        header comment for the whole properties file is also supported. If the
        values of multi-valued properties should always be written on a
        single line rather than adding a new property definition for each value
        (which would be incompatible with <code>java.util.Properties</code>)
        the <code>setForceSingleLine()</code> method can be used.
      </p>
      </subsection>

      <subsection name="Custom properties readers and writers">
      <p>
        There are situations when more control over the process of reading and
        writing properties file is needed. For instance, an application might
        have to deal with some legacy properties file in a specific format,
        which is not supported out of the box by
        <code>PropertiesConfiguration</code>, but must not be modified. In these
        cases it is possible to inject a custom reader and writer for
        properties files.
      </p>
      <p>
        Per default properties files are read and written by the nested classes
        <code>PropertiesReader</code> and <code>PropertiesWriter</code>
        (defined within <code>PropertiesConfiguration</code>). These classes are
        regular reader and writer classes (both are derived from typical base
        classes of the <code>java.io</code> package) that provide some
        additional methods making dealing with properties files more
        convenient. Custom implementations of properties readers and writers
        must extend these base classes.
      </p>
      <p>
        For installing a custom properties reader or writer
        <code>PropertiesConfiguration</code> provides the <code>IOFactory</code>
        interface (which is also defined as a nested class). An object
        implementing this interface is stored in each
        <code>PropertiesConfiguration</code> instance. Whenever a properties
        file is to be read or written (i.e. when one of the <code>load()</code>
        or <code>save()</code> methods is called), the <code>IOFactory</code>
        object is asked for creating the properties reader or writer to be
        used.
      </p>
      <p>
        The <code>IOFactory</code> interface is pretty simple; it defines one
        method for creating a properties reader and another one for creating a
        properties writer. A default implementation called
        <code>DefaultIOFactory</code> is also available and is used by
        <code>PropertiesConfiguration</code> when no specific
        <code>IOFactory</code> is set. To make this discussion more concrete
        we provide an example of how to inject a custom properties reader. The
        use case is that we have to load a properties file that contains keys
        with whitespace, which is not supported by
        <code>PropertiesConfiguration</code> per default. A fragment from such
        a properties file could look as follows:
      </p>
        <source><![CDATA[
Background Color = #800080
Foreground Color = #000080
]]></source>
      <p>
        The first step is to create a custom properties reader implementation
        that can deal with such properties. The class is derived from
        <code>PropertiesConfiguration.PropertiesReader</code> and overrides the
        <code>parseProperty()</code> method:
      </p>
        <source><![CDATA[
public class WhitespacePropertiesReader extends PropertiesConfiguration.PropertiesReader
{
    public WhitespacePropertiesReader(Reader in, char delimiter)
    {
        super(in, delimiter);
    }
    
    /**
     * Special algorithm for parsing properties keys with whitespace. This
     * method is called for each non-comment line read from the properties
     * file.
     */
    protected void parseProperty(String line)
    {
        // simply split the line at the first '=' character
        // (this should be more robust in production code)
        int pos = line.indexOf('=');
        String key = line.substring(0, pos).trim();
        String value = line.substring(pos + 1).trim();

        // now store the key and the value of the property
        initPropertyName(key);
        initPropertyValue(value);
    }
}
]]></source>
      <p>
        Notice the calls to the methods <code>initPropertyName()</code> and
        <code>initPropertyValue()</code>. Here the results of the parsing
        operation are stored. The next step is to provide a specialized
        implementation of the <code>IOFactory</code> interface that returns
        the new properties reader class. As we only want to replace the
        properties reader (and use the standard writer), we can derive our
        implementation from <code>DefaultIOFactory</code> and thus only have
        to override the <code>createPropertiesReader()</code> method.
      </p>
        <source><![CDATA[
public class WhitespaceIOFactory extends PropertiesConfiguration.DefaultIOFactory
{
    /**
     * Return our special properties reader.
     */
    public PropertiesReader createPropertiesReader(Reader in, char delimiter)
    {
        return new WhitespacePropertiesReader(in, delimiter);
    }
}
]]></source>
      <p>
        Finally an instance of our new <code>IOFactory</code> implementation
        has to be created and passed to the <code>PropertiesConfiguration</code>
        object. This must be done before the <code>load()</code> method is
        called. So we cannot use one of the constructors that load the data.
        The code for setting up the configuration object could look as follows:
      </p>
        <source><![CDATA[
PropertiesConfiguration config = new PropertiesConfiguration();
config.setIOFactory(new WhitespaceIOFactory());
config.setFile(...);  // set the file to be loaded
config.load();
]]></source>
      </subsection>
    </section>

  </body>
</document>
