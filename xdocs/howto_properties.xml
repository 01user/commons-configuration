<?xml version="1.0"?>
<!--
   Copyright 2004-2006 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document>
  <properties>
    <title>Properties files</title>
    <author email="smanux@lfjr.net">Emmanuel Bourg</author>
    <author email="oheger@apache.org">Oliver Heger</author>
  </properties>

  <body>

    <section name="Properties files">
      <p>
        Properties files are a popular mean of configuring applications. Of course Commons Configuration
        supports this format and enhances significantly the basic <code>java.util.Properties</code> class.
        This section introduces the features of the 
        <code><a href="apidocs/org/apache/commons/configuration/PropertiesConfiguration.html">PropertiesConfiguration</a></code> class.
        Note that <code>PropertiesConfiguration</code> is a very typical example
        for an implementation of the <code>Configuration</code> interface and
        many of the features described in this section (e.g. list handling or
        interpolation) are supported by other configuration classes as well.
        This is because most configuration implementations that ship with
        Commons Configuration are derived from the common base class
        <code><a href="apidocs/org/apache/commons/configuration/AbstractConfiguration.html">AbstractConfiguration</a></code>,
        which implementes this features.
      </p>

      <subsection name="Using PropertiesConfiguration">
        <p>
          Let's start with a simple properties file named
          <code>usergui.properties</code> with the following content:
        </p>
        <source><![CDATA[
# Properties definining the GUI
colors.background = #FFFFFF
colors.foreground = #000080

window.width = 500
window.height = 300
]]></source>

        <p>
          To load this file, you'll write:
        </p>
<source>
Configuration config = new PropertiesConfiguration("usergui.properties");
</source>
        <p>
          If you do not specify an absolute path, the file will be searched automatically
          in the following locations:
          <ul>
            <li>in the current directory</li>
            <li>in the user home directory</li>
            <li>in the classpath</li>
          </ul>
        </p>
        <p>
          Instead of using a constructor that takes a file name you can also
          invoke one of the <code>load()</code> methods. There are several
          overloaded variants that allow you to load properties from various
          sources. More information about loading properties files (and file-based
          configurations in general) can be found in the section about
          <a href="howto_filebased.html">File-based Configurations</a>.
        </p>
        <p>
          After the properties file was loaded you can access its content through
          the methods of the <code>Configuration</code> interface, e.g.
        </p>
<source>
String backColor = config.getString("colors.background");
Dimension size = new Dimension(config.getInt("window.width"),
  config.getInt("window.height"));
</source>
      </subsection>

      <subsection name="Includes">
        <p>
          If a property is named "<code>include</code>" and the value of that property is the
          name of a file on the disk, that file will be included into the configuration. Here is
          an example:
        </p>
<source>
# usergui.properties

include = colors.properties
include = sizes.properties
</source>

<source>
# colors.properties

colors.background = #FFFFFF
</source>

      </subsection>

      <subsection name="Lists and arrays">
        <p>
          Commons Configuration has the ability to return easily a list of values,
          for example if your file contains a list of comma separated values:
        </p>
<source>
# chart colors
colors.pie = #FF0000, #00FF00, #0000FF
</source>
        <p>
          You don't have to split the value manually, you can retrieve an array
          or a <code>java.util.List</code> directly with:
        </p>
<source>
String[] colors = config.getStringArray("colors.pie");
List colorList = config.getList("colors.pie");
</source>
        <p>
          Alternatively, you can specify a list of values in your properties file by using
          the same key on several lines:
        </p>
<source>
# chart colors
colors.pie = #FF0000;
colors.pie = #00FF00;
colors.pie = #0000FF;
</source>
        <p>
          The <code>addProperty()</code> and <code>setProperty()</code> methods
          also implement special list handling. The property value that is passed
          to these methods can be a list or an array resulting in a property
          with multiple values. If the property value is a string, it is checked
          whether it contains the <em>list delimiter character</em>. If this is
          the case, the string is splitted, and its single parts are added one
          by one. The list delimiter character is the comma by default. It is
          also applied to the properties when the configuration file is loaded
          (that's the reason why the example above with the comma separated list
          of chart colors works). By using the <code>setListDelimiter()</code>
          method you can set it to a different character. Here are some examples:
        </p>
<source>
// Change the list delimiter character to a slash
config.setListDelimiter('/');
// Now add some properties
config.addProperty("greeting", "Hello, how are you?");
config.addProperty("colors.pie",
  new String[] { "#FF0000", "#00FF00", "#0000FF" });
config.addProperty("colors.graph", "#808080/#00FFCC/#6422FF");

// Access data
String salut = config.getString("greeting");
List colPie = config.getList("colors.pie");
String[] colGraph = config.getStringArray("colors.graph");

String firstPieColor = config.getString("colors.pie");
</source>
        <p>
          In this example the list delimiter character is changed from a comma
          to a slash. Because of this the <code>greeting</code> property won't
          be splitted, but remains a single string. The string passed as value
          for the <code>colors.graph</code> property in opposite contains the
          new delimiter character and thus will result in a property with three
          values.
        </p>
        <p>
          Of interest is also the last line of the example fragment. Here the
          <code>getString()</code> method is called for a property that has
          multiple values. This call will return the first value of the list.
        </p>
        <p>
          If you want to change the list delimiter character for all configuration
          objects, you can use the static <code>setDefaultListDelimiter()</code>
          method of <code>AbstractConfiguration</code>. It is also possible to
          disable splitting of string properties at all for a Configuration
          instance by calling its <code>setDelimiterParsingDisabled()</code>
          method with a value of <b>true</b>.
        </p>
        <p>
          <em>Note:</em> The list handling and string splitting facilities
          described in this section are not specific to <code>PropertiesConfiguration</code>,
          but are also supported by other configuration classes.
        </p>
      </subsection>

      <subsection name="Variable Interpolation">
        <p>
          If you are familiar with Ant or Maven, you have most certainly already encountered
          the variables (like <code>${token}</code>) that are automatically expanded when the
          configuration file is loaded. Commons Configuration supports this feature as well,
          here is an example:
        </p>
<source>
application.name = Killer App
application.version = 1.6.2

application.title = ${application.name} ${application.version}
</source>
        <p>
          If you now retrieve the value for the <code>application.title</code>
          property, the result will be <code>Killer App 1.6.2</code>. As for
          list handling, variable interpolation is a feature supported by other
          configuration classes as well.
        </p>
      </subsection>

      <subsection name="Saving">
        <p>
          To save your configuration, just call the <code>save()</code> method:
        </p>
<source>
PropertiesConfiguration config = new PropertiesConfiguration("usergui.properties");
config.setProperty("colors.background", "#000000);
config.save();
</source>
        <p>
          You can also save a copy of the configuration to another file:
        </p>
<source>
PropertiesConfiguration config = new PropertiesConfiguration("usergui.properties");
config.setProperty("colors.background", "#000000);
config.save("usergui.backup.properties);
</source>
        <p>
          More information about saving properties files (and file-based
          configurations in general) can be found in the section about
          <a href="howto_filebased.html">File-based Configurations</a>.
        </p>
      </subsection>

      <subsection name="Special Characters">
        <p>
          If you need a special character in a property like a line feed, a tabulation or
          an unicode character, you can specify it with the same escaped notation used for
          Java Strings. The list separator ("," by default), can also be escaped:
        </p>
        <source><![CDATA[
key = This \n string \t contains \, escaped \\ characters \u0020
]]></source>
      </subsection>

      <subsection name="Layout Objects">
      <p>
        Each <code>PropertiesConfiguration</code> object is associated with a
        <em>Layout object</em>, an instance of the class
        <code><a href="apidocs/org/apache/commons/configuration/PropertiesConfigurationLayout.html">
        PropertiesConfigurationLayout</a></code>. This layout object is
        responsible for preserving most of the structure of loaded configuration
        files. This means that things like comments or blanc lines in a saved
        properties file will closely resemble the original properties file
        (the algorithm is not 100 percent perfect, but for most use cases it
        should be sufficient).
      </p>
      <p>
        Normally a developer does not have to deal with these layout objects.
        However there are some methods that might be of interest in certain use
        cases. For instance <code>PropertiesConfigurationLayout</code> defines
        methods for obtaining and setting the comment for a property key. A
        header comment for the whole properties file is also supported. If the
        values of multi-valued properties should always be written on a
        single line rather than adding a new property definition for each value
        (which would be incompatible with <code>java.util.Properties</code>)
        the <code>setForceSingleLine()</code> method can be used.
      </p>
      </subsection>
    </section>

  </body>
</document>
